@prefix sh:   <http://www.w3.org/ns/shacl#> .
@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd:  <http://www.w3.org/2001/XMLSchema#> .
@prefix nen:  <http://example.org/graphs/nen2660-ontology#> .
@prefix aerius: <http://example.org/graphs/aerius-extension#> .
@prefix : <http://example.org/graphs/example-projects#> .

################################################################################
# SHACL Shapes for Multi-Layer Validation
#
# These shapes enforce the structure of our ontology for linking the NEN 2660
# standard with AERIUS calculations. Rather than merely checking that a property 
# is of a given class (using sh:class), we use sh:node to reference the entire 
# shape of nested resources. This multi-layer approach is crucial because, for 
# example, an Activity must not only link to a MobileSource but that MobileSource 
# must itself fulfill all required constraints (e.g., emission values and linked 
# SpecificMobileSource details).
################################################################################

# Shape for ConstructionProject
:ConstructionProjectShape
    a sh:NodeShape ;
    sh:targetClass aerius:ConstructionProject ;
    sh:property [
        sh:path rdfs:label ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
    ] ;
    sh:property [
        sh:path aerius:includes ;
        sh:node nen:Activity ;  # This level is validated separately via ActivityShape
        sh:minCount 1 ;
    ] ;
    sh:property [
        sh:path aerius:affects ;
        sh:class nen:Region ;
        sh:minCount 1 ;
    ] .

# Shape for Activity
:ActivityShape
    a sh:NodeShape ;
    sh:targetClass nen:Activity ;
    sh:property [
        sh:path rdfs:label ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
    ] ;
    # Instead of simply ensuring a MobileSource is present, we validate the entire MobileSourceShape.
    sh:property [
        sh:path aerius:hasEmissionSource ;
        sh:node :MobileSourceShape ;
        sh:minCount 1 ;
    ] .

# Shape for MobileSource
:MobileSourceShape
    a sh:NodeShape ;
    sh:targetClass aerius:MobileSource ;
    sh:property [
        sh:path aerius:mosolabel ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
    ] ;
    sh:property [
        sh:path aerius:mosoposition ;
        sh:datatype xsd:string ;  # This could be replaced with a spatial datatype if available.
        sh:minCount 1 ;
        sh:maxCount 1 ;
    ] ;
    sh:property [
        sh:path aerius:sectorid ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
    ] ;
    sh:property [
        sh:path aerius:emitsNH3 ;
        sh:datatype xsd:decimal ;
        sh:minCount 1 ;
    ] ;
    sh:property [
        sh:path aerius:emitsNOX ;
        sh:datatype xsd:decimal ;
        sh:minCount 1 ;
    ] ;
    sh:property [
        sh:path aerius:emitsPM10 ;
        sh:datatype xsd:decimal ;
        sh:minCount 1 ;
    ] ;
    sh:property [
        sh:path aerius:emitsNO2 ;
        sh:datatype xsd:decimal ;
        sh:minCount 1 ;
    ] ;
    # Here, we ensure that each MobileSource contains a valid SpecificMobileSource as defined below.
    sh:property [
        sh:path aerius:hasSpecificMobileSource ;
        sh:node :SpecificMobileSourceShape ;
        sh:minCount 1 ;
    ] .

# Shape for SpecificMobileSource
:SpecificMobileSourceShape
    a sh:NodeShape ;
    sh:targetClass aerius:SpecificMobileSource ;
    sh:property [
        sh:path aerius:mobtype ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
    ] ;
    sh:property [
        sh:path aerius:fuelyear ;
        sh:datatype xsd:integer ;  # Use xsd:decimal if fractional values are required.
        sh:minCount 1 ;
        sh:maxCount 1 ;
    ] ;
    sh:property [
        sh:path aerius:description ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
    ] .
